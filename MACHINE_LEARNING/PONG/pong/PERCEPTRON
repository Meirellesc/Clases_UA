**********************
**TRAINED PERCEPTRON** 
**********************

Objective: achieve the ball. -> No impuerta!!

*********************
[INPUT] (X)

datas received from game:

1)player_velocity_y
2)enemy_position
3)enemy_velocity_y
4)ball_position_x
5)ball_position_y
6)ball_velocity_x
7)ball_velocity_y

*********************
[DATA_SET] : datos.csv


*********************
[HYPOTHESIS] : h(input)?? // h(x)??


*********************
[OUTPUTS] (Y)

8)press_up
9)press_down

2 VECTORS:
VECTOR A -> [1] PRESS UP
			[0(-1)] DON'T PRESS UP


VECTOR B -> [1] PRESS DOWN
			[0(-1)] DON'T PRESS DOWN
*********************

DOUBTS HOW TO IMPLEMENT

1. Is a function linear separable ?? [WE DON'T KNOW]
2. The number of weights are random?? (for 0 > 100...10000) [NO, ALL STARTS = '0' AND THEN THE CODE HAVE TO RECALCULATE WHICH ARE MISCLASIFIED]
3. Can I just use the PLA or is it better to use the "Linear Regression" to have a initial condition to start my learning?? 

*********************
IDEAS

f -> X,Y ??

X : datos
Y : press up/down

1) calculate the first weight :  w(t+1) = w(t) + [x(t)*y(t)];

2) verify the equation :  w(t)*x(t) = y(t);

3) if (2) not equal, recalculate the weights (1) -> ONLY FOR THE MISCLASSIFIED POINTS;

4) when finished... g->X,Y !!

*********************
CODE IDEA:

//RECEIVING THE DATASET
vector_x[];
vector_y[];
vector_w[];


w[0] = x[0]*y[0]; //THE FIRST WEIGHT HAS TO BE RANDOM??
g = false; 		  //START WITH G FALSE.


while(g == false){
	
	//CALCULATING THE WEIGHTS.
	for(i=1;i <= vector_x_size ;i++){
		w[i] = w[i-1] + (x[i]*y[i]);
	}

	//CHECKING IF ALL WEIGHTS ARE CORRECTS AND COUNT IT.
	for(j=0;j <= vector_x_size ;j++){
		if((w[j]*x[j]) == y[j]){
			count += 1;
		}
	}
	
	//IF HAVE SOME WEIGHT WRONG THEN RECALCULATE THE WEIGHTS(g=false).
	if(count != vector_x_size){* []
		w[0] += w[0]; //PROBABLY IS WRONG????
	}

	//IF ALL WEIGHTS ARE RIGHT -> FOUND A "G" FUNCTION.
	else{  
		g = true;
	}	
}

return vector_w[];

*********************

//------------------------CODE 2.0------------------------\\ 

//RECEIVING THE DATASET

doble vector_x[][];	//Input
doble vector_y[][];	//Output //-> Have to change all "Zeros" to "-1"?? 
doble vector_w[][];	//Weights //-> INIT ALL ZEROS
doble vector_h[][];	//Model //-> INIT ALL ZEROS


//APPLYING THE FORMULA -> H(X) = SIGN[SUM(Xi.Wi)]

for (int i=0; i<vector_x.size ; i++){
	for (int j=0 ; j<=7 ; j++){
		if ((vector_x[i][j] * vector_w[i][j]) > 0){ 
			vector_h[i][j] = 1.0; //In case the result of sign >= 0 .: h=1
		}
		else{
			vector_h[i][j] = -1.0; //In case the result of sign < 0 .: h=-1
		}
	}
}
	
//VERIFYING THE CLASSIFICATION RANDOMLY ->  H(n)==Y(n)???



for (int i=0; i<(vector_y.size) ; i++){
	for (int j=0 ; j<=7 ; j++){
		if (vector_h[i][j] == vector_y[i][j]){

		}
		else{

		}
	}
}

//UPDATING THE WEIGHTS WHICH ARE MISCLASSIFIED-> W(t+1) = W(t) + Y(t)*X(t)


